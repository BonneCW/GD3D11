name: Release Spacer_NET

on:
  push:
    tags:
      - 'v*'

defaults:
  run:
    shell: pwsh

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set tag and directory name env
      run: |
        $tagName = $Env:GITHUB_REF -replace 'refs/tags/', ''
        $dirName = "SpacerNET-GD3D11-${tagName}"
        echo "Tag: ${tagName}"
        echo "Directory: ${dirName}"
        echo "RELEASE_VERSION=${tagName}" >> $Env:GITHUB_ENV
        echo "RELEASE_DIR=${dirName}" >> $Env:GITHUB_ENV

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore .

    - name: Build G2A
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /p:Configuration=SpacerNET_G2A_SSE2 .

    - name: Build G1A
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /p:Configuration=SpacerNET_G1_SSE2 .

    - name: Build Launcher
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /p:Configuration=Launcher .

    - name: Create distribution zip
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        mkdir "${{env.RELEASE_DIR}}\GD3D11\shaders\CSFFT" -Force
        mkdir "${{env.RELEASE_DIR}}\GD3D11\Bin" -Force
        Xcopy "D3D11Engine\Shaders\*" "${{env.RELEASE_DIR}}\GD3D11\shaders" /s
        copy "D3D11Engine\CSFFT\*.hlsl" "${{env.RELEASE_DIR}}\GD3D11\shaders\CSFFT"
        Xcopy "blobs\Meshes" "${{env.RELEASE_DIR}}\GD3D11\Meshes\" /s
        Xcopy "blobs\Textures" "${{env.RELEASE_DIR}}\GD3D11\Textures\" /s
        Xcopy "blobs\Fonts" "${{env.RELEASE_DIR}}\GD3D11\Fonts\" /s
        Xcopy "blobs\libs\*" "${{env.RELEASE_DIR}}\" /s
        copy "SpacerNET_G2A_SSE2\ddraw.dll" "${{env.RELEASE_DIR}}\GD3D11\Bin\SpacerNET_g2a_sse2.dll"
        copy "SpacerNET_G1_SSE2\ddraw.dll" "${{env.RELEASE_DIR}}\GD3D11\Bin\SpacerNET_g1_sse2.dll"
        copy "Launcher\ddraw.dll" "${{env.RELEASE_DIR}}\"
        cd "${{env.RELEASE_DIR}}"
        7z a -tzip "..\${{env.RELEASE_DIR}}.zip" -r

    - name: Calculate distribution zip hash
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        (Get-FileHash "${{env.RELEASE_DIR}}.zip" -Algorithm SHA256).hash | Out-File -FilePath "${{env.RELEASE_DIR}}.zip.sha256"
        type "${{env.RELEASE_DIR}}.zip.sha256"

    - name: Create github release
      run: |
        gh release create ${{env.RELEASE_VERSION}} -n "Generated release from GitHub Actions"
        echo "Ignore 'Validation Failed' results. Expected since only the first job that reaches this step can create the release."
        exit 0
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Upload artifacts to github release
      run: |
        gh release upload ${{env.RELEASE_VERSION}} "${{env.RELEASE_DIR}}.zip"
        gh release upload ${{env.RELEASE_VERSION}} "${{env.RELEASE_DIR}}.zip.sha256"
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
